import torch
import torch.nn as nn
from typing import Dict, Any, List, Tuple

class Model(nn.Module):
    def __init__(self):
        super().__init__()
        self.ADD = None
        self.x2 = tensor([[ 0.1388, -0.2487, -0.6143,  ...,  0.5837,  0.3234,  0.5519],
        [ 0.4488,  0.9010, -1.8220,  ...,  0.3346, -2.2419,  0.7975],
        [-0.3846,  0.4613,  0.2074,  ...,  0.2427, -0.9448, -1.5245],
        ...,
        [ 0.0174,  2.0584, -0.2394,  ..., -0.8111,  2.8660,  0.8453],
        [ 0.4705,  1.0642, -0.3530,  ...,  0.0884,  0.5960, -0.1545],
        [ 0.2035,  0.3740,  1.6937,  ...,  0.2080, -1.9407,  0.2792]])
        self.x1 = tensor([[-0.6170, -1.1131, -1.0118,  ..., -0.5363,  0.8830,  0.4826],
        [-1.3878, -1.5873,  1.2671,  ..., -0.7091,  0.0294,  0.8949],
        [ 0.0152, -0.6045,  0.7608,  ...,  1.3840,  1.2446, -0.8131],
        ...,
        [ 1.4633,  0.1939,  0.0126,  ..., -0.5888,  1.3875,  0.5477],
        [-0.3653,  0.0034,  1.2370,  ...,  0.0368, -0.4269,  0.2697],
        [-0.1448,  0.2479,  0.5933,  ..., -0.4036, -0.4723, -0.5718]])

    def forward(self, x):
        output = self.x1 + self.x2
        return output

def main():

if __name__ == '__main__':
    main()
